/***************************************************************************//**
 * @brief Bluetooth stack initialization APIs
 *******************************************************************************
 * # License
 * <b>Copyright 2019 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 ******************************************************************************/


#ifndef SL_BTMESH_STACK_INIT_H
#define SL_BTMESH_STACK_INIT_H

#include "sl_status.h"

/* Forward declarations of internal initialization functions */
void sli_btmesh_class_node_init_full();
void sli_btmesh_class_node_init_optimized();
void sli_btmesh_class_prov_init_full();
void sli_btmesh_class_prov_init_optimized();
void sli_btmesh_class_proxy_init_full();
void sli_btmesh_class_proxy_init_optimized();
void sli_btmesh_class_vendor_model_init_full();
void sli_btmesh_class_vendor_model_init_optimized();
void sli_btmesh_class_health_client_init_full();
void sli_btmesh_class_health_client_init_optimized();
void sli_btmesh_class_health_server_init_full();
void sli_btmesh_class_health_server_init_optimized();
void sli_btmesh_class_generic_client_init_full();
void sli_btmesh_class_generic_client_init_optimized();
void sli_btmesh_class_generic_server_init_full();
void sli_btmesh_class_generic_server_init_optimized();
void sli_btmesh_class_test_init_full();
void sli_btmesh_class_test_init_optimized();
void sli_btmesh_class_lpn_init_full();
void sli_btmesh_class_lpn_init_optimized();
void sli_btmesh_class_friend_init_full();
void sli_btmesh_class_friend_init_optimized();
void sli_btmesh_class_proxy_client_init_full();
void sli_btmesh_class_proxy_client_init_optimized();
void sli_btmesh_class_proxy_server_init_full();
void sli_btmesh_class_proxy_server_init_optimized();
void sli_btmesh_class_config_client_init_full();
void sli_btmesh_class_config_client_init_optimized();
void sli_btmesh_class_sensor_server_init_full();
void sli_btmesh_class_sensor_server_init_optimized();
void sli_btmesh_class_sensor_setup_server_init_full();
void sli_btmesh_class_sensor_setup_server_init_optimized();
void sli_btmesh_class_sensor_client_init_full();
void sli_btmesh_class_sensor_client_init_optimized();
void sli_btmesh_class_lc_client_init_full();
void sli_btmesh_class_lc_client_init_optimized();
void sli_btmesh_class_lc_server_init_full();
void sli_btmesh_class_lc_server_init_optimized();
void sli_btmesh_class_lc_setup_server_init_full();
void sli_btmesh_class_lc_setup_server_init_optimized();
void sli_btmesh_class_scene_client_init_full();
void sli_btmesh_class_scene_client_init_optimized();
void sli_btmesh_class_scene_server_init_full();
void sli_btmesh_class_scene_server_init_optimized();
void sli_btmesh_class_scene_setup_server_init_full();
void sli_btmesh_class_scene_setup_server_init_optimized();
void sli_btmesh_class_scheduler_client_init_full();
void sli_btmesh_class_scheduler_client_init_optimized();
void sli_btmesh_class_scheduler_server_init_full();
void sli_btmesh_class_scheduler_server_init_optimized();
void sli_btmesh_class_time_server_init_full();
void sli_btmesh_class_time_server_init_optimized();
void sli_btmesh_class_time_client_init_full();
void sli_btmesh_class_time_client_init_optimized();



/**
 * @brief Initialize SL_BTMESH_API class node.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_node_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_node_init_full();
#else
  sli_btmesh_class_node_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class prov.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_prov_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_prov_init_full();
#else
  sli_btmesh_class_prov_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class proxy.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_proxy_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_proxy_init_full();
#else
  sli_btmesh_class_proxy_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class vendor_model.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_vendor_model_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_vendor_model_init_full();
#else
  sli_btmesh_class_vendor_model_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class health_client.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_health_client_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_health_client_init_full();
#else
  sli_btmesh_class_health_client_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class health_server.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_health_server_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_health_server_init_full();
#else
  sli_btmesh_class_health_server_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class generic_client.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_generic_client_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_generic_client_init_full();
#else
  sli_btmesh_class_generic_client_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class generic_server.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_generic_server_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_generic_server_init_full();
#else
  sli_btmesh_class_generic_server_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class test.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_test_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_test_init_full();
#else
  sli_btmesh_class_test_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class lpn.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_lpn_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_lpn_init_full();
#else
  sli_btmesh_class_lpn_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class friend.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_friend_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_friend_init_full();
#else
  sli_btmesh_class_friend_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class proxy_client.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_proxy_client_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_proxy_client_init_full();
#else
  sli_btmesh_class_proxy_client_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class proxy_server.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_proxy_server_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_proxy_server_init_full();
#else
  sli_btmesh_class_proxy_server_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class config_client.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_config_client_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_config_client_init_full();
#else
  sli_btmesh_class_config_client_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class sensor_server.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_sensor_server_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_sensor_server_init_full();
#else
  sli_btmesh_class_sensor_server_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class sensor_setup_server.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_sensor_setup_server_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_sensor_setup_server_init_full();
#else
  sli_btmesh_class_sensor_setup_server_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class sensor_client.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_sensor_client_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_sensor_client_init_full();
#else
  sli_btmesh_class_sensor_client_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class lc_client.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_lc_client_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_lc_client_init_full();
#else
  sli_btmesh_class_lc_client_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class lc_server.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_lc_server_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_lc_server_init_full();
#else
  sli_btmesh_class_lc_server_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class lc_setup_server.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_lc_setup_server_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_lc_setup_server_init_full();
#else
  sli_btmesh_class_lc_setup_server_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class scene_client.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_scene_client_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_scene_client_init_full();
#else
  sli_btmesh_class_scene_client_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class scene_server.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_scene_server_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_scene_server_init_full();
#else
  sli_btmesh_class_scene_server_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class scene_setup_server.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_scene_setup_server_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_scene_setup_server_init_full();
#else
  sli_btmesh_class_scene_setup_server_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class scheduler_client.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_scheduler_client_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_scheduler_client_init_full();
#else
  sli_btmesh_class_scheduler_client_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class scheduler_server.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_scheduler_server_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_scheduler_server_init_full();
#else
  sli_btmesh_class_scheduler_server_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class time_server.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_time_server_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_time_server_init_full();
#else
  sli_btmesh_class_time_server_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BTMESH_API class time_client.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_btmesh_class_time_client_init()
{
#ifdef SL_BT_API_FULL
  sli_btmesh_class_time_client_init_full();
#else
  sli_btmesh_class_time_client_init_optimized();
#endif
}


#endif